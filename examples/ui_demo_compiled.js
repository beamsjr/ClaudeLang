// Requires ClaudeLang runtime to be loaded



// Component definitions


ClaudeLang.defineComponent('TodoItem', {
    props: {"text": {"type": "string", "required": true, "default": null}, "completed": {"type": "bool", "required": false, "default": "b395451c-13ce-4211-9e8a-f337e389d911"}, "onToggle": {"type": "function", "required": false, "default": null}, "onDelete": {"type": "function", "required": false, "default": null}},
    render: (props) => ClaudeLang.primitives['dom:h']("li", ClaudeLang.primitives['set']({}, "class", ClaudeLang.primitives['ui:class']("todo-item", ClaudeLang.primitives['set']({}, "completed", ClaudeLang.primitives['get'](props, "completed")))), ClaudeLang.primitives['cons'](ClaudeLang.primitives['dom:h']("input", ClaudeLang.primitives['set'](ClaudeLang.primitives['set'](ClaudeLang.primitives['set']({}, "type", "checkbox"), "checked", ClaudeLang.primitives['get'](props, "completed")), "onChange", ClaudeLang.primitives['get'](props, "onToggle")), []), ClaudeLang.primitives['cons'](ClaudeLang.primitives['dom:h']("span", {}, [ClaudeLang.primitives['dom:text'](ClaudeLang.primitives['get'](props, "text"))]), [ClaudeLang.primitives['dom:h']("button", ClaudeLang.primitives['set']({}, "onClick", ClaudeLang.primitives['get'](props, "onDelete")), [ClaudeLang.primitives['dom:text']("Delete")])])))
})


ClaudeLang.defineComponent('TodoApp', {
    props: {},
    render: (props) => (() => { const todos = ClaudeLang.performEffect('STATE', 'reactive-ref', [[]]); const input_value = ClaudeLang.performEffect('STATE', 'reactive-ref', [""]); const filter_mode = ClaudeLang.performEffect('STATE', 'reactive-ref', ["all"]); return (() => { const filtered_todos = ClaudeLang.performEffect('STATE', 'reactive-computed', [() => (() => { const all_todos = ClaudeLang.performEffect('STATE', 'reactive-get', [todos]); const mode = ClaudeLang.performEffect('STATE', 'reactive-get', [filter_mode]); return (ClaudeLang.primitives['='](mode, "active") ? ClaudeLang.primitives['filter']((todo) => ClaudeLang.primitives['not'](ClaudeLang.primitives['get'](todo, "completed")), all_todos) : (ClaudeLang.primitives['='](mode, "completed") ? ClaudeLang.primitives['filter']((todo) => ClaudeLang.primitives['get'](todo, "completed"), all_todos) : all_todos)); })()]); const add_todo = () => (() => { const text = ClaudeLang.performEffect('STATE', 'reactive-get', [input_value]); return (ClaudeLang.primitives['not'](ClaudeLang.primitives['empty?'](text)) ? (ClaudeLang.performEffect('STATE', 'reactive-update', [todos, (current) => ClaudeLang.primitives['cons'](ClaudeLang.primitives['set'](ClaudeLang.primitives['set']({}, "id", ClaudeLang.primitives['to-string'](ClaudeLang.primitives['length'](current))), "text", text, "completed", false), current)]), ClaudeLang.performEffect('STATE', 'reactive-set', [input_value, ""])) : null); })(); const toggle_todo = (id) => ClaudeLang.performEffect('STATE', 'reactive-update', [todos, (current) => ClaudeLang.primitives['map']((todo) => (ClaudeLang.primitives['='](ClaudeLang.primitives['get'](todo, "id"), id) ? ClaudeLang.primitives['set'](todo, "completed", ClaudeLang.primitives['not'](ClaudeLang.primitives['get'](todo, "completed"))) : todo), current)]); const delete_todo = (id) => ClaudeLang.performEffect('STATE', 'reactive-update', [todos, (current) => ClaudeLang.primitives['filter']((todo) => ClaudeLang.primitives['not'](ClaudeLang.primitives['='](ClaudeLang.primitives['get'](todo, "id"), id)), current)]); return ClaudeLang.primitives['dom:h']("div", ClaudeLang.primitives['set']({}, "class", "todo-app"), ClaudeLang.primitives['cons'](ClaudeLang.primitives['dom:h']("h1", {}, [ClaudeLang.primitives['dom:text']("ClaudeLang Todo App")]), ClaudeLang.primitives['cons'](ClaudeLang.primitives['dom:h']("div", ClaudeLang.primitives['set']({}, "class", "input-section"), ClaudeLang.primitives['cons'](ClaudeLang.primitives['dom:h']("input", ClaudeLang.primitives['set'](ClaudeLang.primitives['set'](ClaudeLang.primitives['set'](ClaudeLang.primitives['set']({}, "type", "text"), "value", ClaudeLang.performEffect('STATE', 'reactive-get', [input_value])), "placeholder", "What needs to be done?"), "onInput", (e) => ClaudeLang.performEffect('STATE', 'reactive-set', [input_value, ClaudeLang.primitives['get'](ClaudeLang.primitives['get'](e, "target"), "value")])), []), [ClaudeLang.primitives['dom:h']("button", ClaudeLang.primitives['set']({}, "onClick", add_todo), [ClaudeLang.primitives['dom:text']("Add")])])), ClaudeLang.primitives['cons'](ClaudeLang.primitives['dom:h']("div", ClaudeLang.primitives['set']({}, "class", "filters"), ClaudeLang.primitives['cons'](ClaudeLang.primitives['dom:h']("button", ClaudeLang.primitives['set'](ClaudeLang.primitives['set']({}, "class", ClaudeLang.primitives['ui:class']("filter-btn", ClaudeLang.primitives['set']({}, "active", ClaudeLang.primitives['='](ClaudeLang.performEffect('STATE', 'reactive-get', [filter_mode]), "all")))), "onClick", () => ClaudeLang.performEffect('STATE', 'reactive-set', [filter_mode, "all"])), [ClaudeLang.primitives['dom:text']("All")]), ClaudeLang.primitives['cons'](ClaudeLang.primitives['dom:h']("button", ClaudeLang.primitives['set'](ClaudeLang.primitives['set']({}, "class", ClaudeLang.primitives['ui:class']("filter-btn", ClaudeLang.primitives['set']({}, "active", ClaudeLang.primitives['='](ClaudeLang.performEffect('STATE', 'reactive-get', [filter_mode]), "active")))), "onClick", () => ClaudeLang.performEffect('STATE', 'reactive-set', [filter_mode, "active"])), [ClaudeLang.primitives['dom:text']("Active")]), [ClaudeLang.primitives['dom:h']("button", ClaudeLang.primitives['set'](ClaudeLang.primitives['set']({}, "class", ClaudeLang.primitives['ui:class']("filter-btn", ClaudeLang.primitives['set']({}, "active", ClaudeLang.primitives['='](ClaudeLang.performEffect('STATE', 'reactive-get', [filter_mode]), "completed")))), "onClick", () => ClaudeLang.performEffect('STATE', 'reactive-set', [filter_mode, "completed"])), [ClaudeLang.primitives['dom:text']("Completed")])]))), ClaudeLang.primitives['cons'](ClaudeLang.primitives['dom:h']("ul", ClaudeLang.primitives['set']({}, "class", "todo-list"), ClaudeLang.performEffect('STATE', 'reactive-get', [filtered_todos]).map((todo) => ClaudeLang.primitives['ui:create']("TodoItem", ClaudeLang.primitives['set'](ClaudeLang.primitives['set'](ClaudeLang.primitives['set'](ClaudeLang.primitives['set']({}, "text", ClaudeLang.primitives['get'](todo, "text")), "completed", ClaudeLang.primitives['get'](todo, "completed")), "onToggle", () => toggle_todo(ClaudeLang.primitives['get'](todo, "id"))), "onDelete", () => delete_todo(ClaudeLang.primitives['get'](todo, "id")))))), [(() => { const active_count = ClaudeLang.primitives['length'](ClaudeLang.primitives['filter']((t) => ClaudeLang.primitives['not'](ClaudeLang.primitives['get'](t, "completed")), ClaudeLang.performEffect('STATE', 'reactive-get', [todos]))); return ClaudeLang.primitives['dom:h']("div", ClaudeLang.primitives['set']({}, "class", "stats"), [ClaudeLang.primitives['dom:text'](ClaudeLang.primitives['concat'](ClaudeLang.primitives['to-string'](active_count), " item(s) left"))]); })()]))))); })(); })()
})


ClaudeLang.defineComponent('SmartCounter', {
    props: {},
    render: (props) => (() => { const count = ClaudeLang.performEffect('STATE', 'reactive-ref', [0]); const clicks = ClaudeLang.performEffect('STATE', 'reactive-ref', [0]); return (() => { const click_rate = ClaudeLang.performEffect('STATE', 'reactive-computed', [() => (() => { const c = ClaudeLang.performEffect('STATE', 'reactive-get', [clicks]); return (ClaudeLang.primitives['>'](c, 0) ? ClaudeLang.primitives['concat']("Click rate: ", ClaudeLang.primitives['to-string'](c), " clicks") : "No clicks yet"); })()]); return ClaudeLang.primitives['dom:h']("div", ClaudeLang.primitives['set']({}, "class", "smart-counter"), ClaudeLang.primitives['cons'](ClaudeLang.primitives['dom:h']("h2", {}, [ClaudeLang.primitives['dom:text']("Smart Counter")]), ClaudeLang.primitives['cons'](ClaudeLang.primitives['dom:h']("p", {}, [ClaudeLang.primitives['dom:text'](ClaudeLang.primitives['concat']("Count: ", ClaudeLang.primitives['to-string'](ClaudeLang.performEffect('STATE', 'reactive-get', [count]))))]), ClaudeLang.primitives['cons'](ClaudeLang.primitives['dom:h']("button", ClaudeLang.primitives['set']({}, "onClick", () => (ClaudeLang.performEffect('STATE', 'reactive-update', [count, (c) => ClaudeLang.primitives['+'](c, 1)]), ClaudeLang.performEffect('STATE', 'reactive-update', [clicks, (c) => ClaudeLang.primitives['+'](c, 1)]))), [ClaudeLang.primitives['dom:text']("Increment")]), [ClaudeLang.primitives['dom:h']("p", ClaudeLang.primitives['set']({}, "class", "rate"), [ClaudeLang.primitives['dom:text'](ClaudeLang.performEffect('STATE', 'reactive-get', [click_rate]))])])))); })(); })()
})

(() => { const app_container = ClaudeLang.primitives['dom:h']("div", {}, ClaudeLang.primitives['cons'](ClaudeLang.primitives['ui:create']("TodoApp", {}), ClaudeLang.primitives['cons'](ClaudeLang.primitives['dom:h']("hr", {}, []), [ClaudeLang.primitives['ui:create']("SmartCounter", {})]))); return ClaudeLang.performEffect('DOM', 'render', [app_container, "#app"]); })()