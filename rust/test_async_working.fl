;; Working async/await test for FluentAI

;; Test 1: Channels work
(print-line "=== Test 1: Channel creation ===")
(print-line (chan))

;; Test 2: Send/Receive in sequence
(print-line "\n=== Test 2: Send/Receive ===")
(let ((my-channel (chan)))
  (let ((_ (send! my-channel "Hello from channel")))
    (let ((msg (recv! my-channel)))
      (print-line msg))))

;; Test 3: Spawn
(print-line "\n=== Test 3: Spawn ===")
(spawn (lambda () (print-line "Spawned task executed")))

;; Give spawned task time to run
(+ 1 2 3)

;; Test 4: Async (currently just executes body)
(print-line "\n=== Test 4: Async ===")
(async (print-line "Inside async block"))

;; Test 5: Multiple spawns with channels
(print-line "\n=== Test 5: Multiple spawns with channels ===")
(let ((ch1 (chan))
      (ch2 (chan)))
  (do
    ;; Spawn first sender
    (spawn (lambda () 
      (send! ch1 "Message from task 1")))
    
    ;; Spawn second sender
    (spawn (lambda ()
      (send! ch2 "Message from task 2")))
    
    ;; Small computation to let spawns run
    (+ 10 20 30)
    
    ;; Receive from both
    (print-line (recv! ch1))
    (print-line (recv! ch2))))

(print-line "\n=== All tests complete ===")