; Async/await demonstration in FluentAI
; Shows how to use promises and concurrent operations

; Simple async function
(async
  (lambda ()
    (print "Starting async operation...")
    (let ((result (+ 1 2 3)))
      (print "Async result:" result)
      result)))

; Using await
(async
  (lambda ()
    (print "Creating promise...")
    (let ((promise (async (lambda () (* 7 6)))))
      (print "Waiting for result...")
      (let ((result (await promise)))
        (print "Got result:" result)))))

; Concurrent operations with channels
(let ((ch (channel)))
  ; Spawn a sender
  (spawn 
    (lambda ()
      (print "Sender: Sending message...")
      (send ch "Hello from sender!")
      (print "Sender: Message sent")))
  
  ; Receive the message
  (print "Main: Waiting for message...")
  (let ((msg (receive ch)))
    (print "Main: Received:" msg)))

; Multiple concurrent tasks
(let ((ch1 (channel))
      (ch2 (channel)))
  ; First worker
  (spawn
    (lambda ()
      (let ((result (* 5 5)))
        (send ch1 result))))
  
  ; Second worker  
  (spawn
    (lambda ()
      (let ((result (+ 10 20)))
        (send ch2 result))))
  
  ; Collect results
  (let ((r1 (receive ch1))
        (r2 (receive ch2)))
    (print "Worker 1 result:" r1)
    (print "Worker 2 result:" r2)
    (print "Combined:" (+ r1 r2))))

; Producer-consumer pattern
(let ((data-ch (channel))
      (done-ch (channel)))
  ; Producer
  (spawn
    (lambda ()
      (letrec ((produce
                (lambda (n)
                  (if (> n 0)
                      (begin
                        (send data-ch n)
                        (produce (- n 1)))
                      (send done-ch true)))))
        (produce 5))))
  
  ; Consumer
  (letrec ((consume
            (lambda ()
              (let ((done (receive done-ch)))
                (if done
                    (print "Consumer: All done!")
                    (let ((value (receive data-ch)))
                      (print "Consumer: Got" value)
                      (consume)))))))
    (consume)))