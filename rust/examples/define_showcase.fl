;; define_showcase.fl - Demonstrates various uses of define

;; Simple value definitions
(define x 42)
(define y 58)
(define message "Hello, FluentAI!")

;; Function definitions using lambda
(define add (lambda (a b) (+ a b)))
(define multiply (lambda (a b) (* a b)))

;; Function definitions using shorthand syntax
(define (square n) (* n n))
(define (cube n) (* n n n))

;; Higher-order function
(define (compose f g)
  (lambda (x) (f (g x))))

;; Recursive function
(define (factorial n)
  (if (= n 0)
      1
      (* n (factorial (- n 1)))))

;; Mutual recursion example
(define (even? n)
  (if (= n 0)
      true
      (odd? (- n 1))))

(define (odd? n)
  (if (= n 0)
      false
      (even? (- n 1))))

;; Using the definitions
(define sum (add x y))
(define squared (square 7))
(define fact5 (factorial 5))

;; Compose example
(define square-then-cube (compose cube square))
(define result (square-then-cube 2))  ; (2^2)^3 = 64

;; List operations with defined functions
(define numbers [1 2 3 4 5])
(define squared-numbers (map square numbers))

;; Pattern matching with defined function
(define (describe-number n)
  (match n
    [0 "zero"]
    [1 "one"]
    [n (if (even? n) "even" "odd")]))

;; Final results
(begin
  sum           ; 100
  squared       ; 49
  fact5         ; 120
  result        ; 64
  (even? 10)    ; true
  (odd? 7)      ; true
  squared-numbers ; [1 4 9 16 25]
  (describe-number 0)   ; "zero"
  (describe-number 4)   ; "even"
  (describe-number 5))  ; "odd"