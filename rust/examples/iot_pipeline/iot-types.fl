;; iot-types.fl - Sensor data type definitions and validation
;; Defines the core data structures for IoT sensor readings

(module iot-types
  (export make-sensor-reading
          sensor-reading?
          sensor-id
          sensor-timestamp
          sensor-value
          sensor-metadata
          
          make-anomaly
          anomaly?
          anomaly-reading
          anomaly-type
          anomaly-severity
          
          valid-sensor-reading?
          valid-anomaly?
          enrich-reading
          reading->string)

  ;; Sensor reading type - represents a single data point from an IoT sensor
  ;; Tagged value format: ("sensor-reading" sensor-id timestamp value metadata)
  (define (make-sensor-reading id timestamp value metadata)
    (make-tagged "sensor-reading" id timestamp value metadata))
  
  ;; Type predicate
  (define (sensor-reading? val)
    (and (tagged? val)
         (eq? (tagged-tag val) "sensor-reading")
         (= (length (tagged-values val)) 4)))
  
  ;; Accessors
  (define (sensor-id reading)
    (if (sensor-reading? reading)
        (list-ref (tagged-values reading) 0)
        (error "sensor-id: not a sensor reading")))
  
  (define (sensor-timestamp reading)
    (if (sensor-reading? reading)
        (list-ref (tagged-values reading) 1)
        (error "sensor-timestamp: not a sensor reading")))
  
  (define (sensor-value reading)
    (if (sensor-reading? reading)
        (list-ref (tagged-values reading) 2)
        (error "sensor-value: not a sensor reading")))
  
  (define (sensor-metadata reading)
    (if (sensor-reading? reading)
        (list-ref (tagged-values reading) 3)
        (error "sensor-metadata: not a sensor reading")))
  
  ;; Anomaly type - represents a detected anomaly in sensor data
  ;; Tagged value format: ("anomaly" reading type severity)
  (define (make-anomaly reading type severity)
    (make-tagged "anomaly" reading type severity))
  
  (define (anomaly? val)
    (and (tagged? val)
         (eq? (tagged-tag val) "anomaly")
         (= (length (tagged-values val)) 3)))
  
  ;; Anomaly accessors
  (define (anomaly-reading anomaly)
    (if (anomaly? anomaly)
        (list-ref (tagged-values anomaly) 0)
        (error "anomaly-reading: not an anomaly")))
  
  (define (anomaly-type anomaly)
    (if (anomaly? anomaly)
        (list-ref (tagged-values anomaly) 1)
        (error "anomaly-type: not an anomaly")))
  
  (define (anomaly-severity anomaly)
    (if (anomaly? anomaly)
        (list-ref (tagged-values anomaly) 2)
        (error "anomaly-severity: not an anomaly")))
  
  ;; Validation predicates
  (define (valid-sensor-reading? reading)
    (and (sensor-reading? reading)
         (string? (sensor-id reading))
         (number? (sensor-timestamp reading))
         (>= (sensor-timestamp reading) 0)
         (number? (sensor-value reading))
         (map? (sensor-metadata reading))))
  
  (define (valid-anomaly? anomaly)
    (and (anomaly? anomaly)
         (valid-sensor-reading? (anomaly-reading anomaly))
         (string? (anomaly-type anomaly))
         (member? (anomaly-type anomaly) 
                  ["temperature-spike" "value-out-of-range" "sensor-failure" "pattern-anomaly"])
         (string? (anomaly-severity anomaly))
         (member? (anomaly-severity anomaly) ["low" "medium" "high" "critical"])))
  
  ;; Enrich a reading with additional metadata
  (define (enrich-reading reading additional-metadata)
    (if (not (sensor-reading? reading))
        (error "enrich-reading: not a sensor reading")
        (let ((current-meta (sensor-metadata reading))
              (new-meta (map-merge current-meta additional-metadata)))
          (make-sensor-reading 
            (sensor-id reading)
            (sensor-timestamp reading)
            (sensor-value reading)
            new-meta))))
  
  ;; String representation for debugging
  (define (reading->string reading)
    (if (sensor-reading? reading)
        (string-format "SensorReading(id={}, time={}, value={}, meta={})"
                      (sensor-id reading)
                      (sensor-timestamp reading)
                      (sensor-value reading)
                      (sensor-metadata reading))
        (error "reading->string: not a sensor reading"))))