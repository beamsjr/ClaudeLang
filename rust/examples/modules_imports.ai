; Module system demonstration in FluentAI
; Shows how to define modules and use imports/exports

; Define a math utilities module
(module math-utils [square cube factorial power]
  
  (define square
    (lambda (x) (* x x)))
  
  (define cube
    (lambda (x) (* x x x)))
  
  (define factorial
    (lambda (n)
      (if (<= n 1)
          1
          (* n (factorial (- n 1))))))
  
  (define power
    (lambda (base exp)
      (if (= exp 0)
          1
          (* base (power base (- exp 1)))))))

; Define a list utilities module
(module list-utils [map filter reduce length]
  
  (define map
    (lambda (f lst)
      (match lst
        ((Nil) (list))
        ((Cons x xs) (cons (f x) (map f xs))))))
  
  (define filter
    (lambda (pred lst)
      (match lst
        ((Nil) (list))
        ((Cons x xs)
          (if (pred x)
              (cons x (filter pred xs))
              (filter pred xs))))))
  
  (define reduce
    (lambda (f init lst)
      (match lst
        ((Nil) init)
        ((Cons x xs) (reduce f (f init x) xs)))))
  
  (define length
    (lambda (lst)
      (match lst
        ((Nil) 0)
        ((Cons x xs) (+ 1 (length xs)))))))

; Import specific functions
(import "math-utils" (square factorial))
(import "list-utils" (map filter))

; Use imported functions
(print "5 squared:" (square 5))
(print "5 factorial:" (factorial 5))

; Use imported list functions
(let ((numbers (list 1 2 3 4 5)))
  (print "Original:" numbers)
  (print "Squared:" (map square numbers))
  (print "Even only:" (filter (lambda (x) (= (% x 2) 0)) numbers)))

; Import all exports from a module
(import "math-utils" *)

; Now we can use all math functions
(print "2 cubed:" (cube 2))
(print "2^8:" (power 2 8))

; Qualified imports (if supported)
; (import "math-utils" :as math)
; (print "Using qualified import:" (math:square 7))

; Export our own functions
(define double (lambda (x) (* x 2)))
(define triple (lambda (x) (* x 3)))

(export double triple)