#!/usr/bin/env python3
"""
ClaudeLang Linter CLI

Usage:
    claudelang-lint [options] <file>...
    claudelang-lint --stdin

Options:
    -c, --config <file>     Use configuration file
    -f, --format <fmt>      Output format: text, json (default: text)
    -q, --quiet             Only show errors
    -v, --verbose           Show all issues including hints
    --disable <rule>        Disable specific rule(s)
    --enable <rule>         Enable specific rule(s)
    --list-rules            List all available rules
    --stdin                 Read from stdin
    -h, --help              Show this help message
"""

import sys
import os
import argparse
import json
from pathlib import Path
from typing import List, Dict, Any

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.linter import ClaudeLangLinter, lint_file, LintLevel, LintIssue
from src.linter.rules import get_default_rules


def format_issue_text(issue: LintIssue, filename: str) -> str:
    """Format lint issue as text"""
    level_str = issue.level.value.upper()
    location = f"{filename}:{issue.line}:{issue.column}"
    
    msg = f"{location}: {level_str} [{issue.rule_id}] {issue.message}"
    
    if issue.suggestion:
        msg += f"\n  Suggestion: {issue.suggestion}"
    
    return msg


def format_issues_json(issues: List[LintIssue], filename: str) -> Dict[str, Any]:
    """Format lint issues as JSON"""
    return {
        "file": filename,
        "issues": [
            {
                "rule": issue.rule_id,
                "level": issue.level.value,
                "message": issue.message,
                "line": issue.line,
                "column": issue.column,
                "end_line": issue.end_line,
                "end_column": issue.end_column,
                "suggestion": issue.suggestion
            }
            for issue in issues
        ]
    }


def list_rules():
    """List all available lint rules"""
    rules = get_default_rules()
    
    print("Available lint rules:")
    print()
    
    for rule in rules:
        status = "enabled" if rule.enabled else "disabled"
        print(f"{rule.id:<25} {rule.level.value:<8} {status:<10} {rule.name}")
        print(f"{'':25} {rule.description}")
        print()


def load_config(config_file: str) -> Dict[str, Any]:
    """Load linter configuration from file"""
    try:
        with open(config_file, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error loading config file: {e}", file=sys.stderr)
        return {}


def main():
    parser = argparse.ArgumentParser(
        description='Lint ClaudeLang source code',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        'files',
        nargs='*',
        help='Files to lint'
    )
    
    parser.add_argument(
        '-c', '--config',
        help='Configuration file'
    )
    
    parser.add_argument(
        '-f', '--format',
        choices=['text', 'json'],
        default='text',
        help='Output format (default: text)'
    )
    
    parser.add_argument(
        '-q', '--quiet',
        action='store_true',
        help='Only show errors'
    )
    
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Show all issues including hints'
    )
    
    parser.add_argument(
        '--disable',
        action='append',
        default=[],
        help='Disable specific rule(s)'
    )
    
    parser.add_argument(
        '--enable',
        action='append',
        default=[],
        help='Enable specific rule(s)'
    )
    
    parser.add_argument(
        '--list-rules',
        action='store_true',
        help='List all available rules'
    )
    
    parser.add_argument(
        '--stdin',
        action='store_true',
        help='Read from stdin'
    )
    
    args = parser.parse_args()
    
    # Handle list-rules
    if args.list_rules:
        list_rules()
        return 0
    
    # Create linter
    linter = ClaudeLangLinter()
    
    # Load config if provided
    if args.config:
        config = load_config(args.config)
        for rule_id, rule_config in config.get('rules', {}).items():
            if 'enabled' in rule_config:
                if rule_config['enabled']:
                    linter.enable_rule(rule_id)
                else:
                    linter.disable_rule(rule_id)
            if 'config' in rule_config:
                linter.configure_rule(rule_id, rule_config['config'])
    
    # Apply command-line rule modifications
    for rule_id in args.disable:
        linter.disable_rule(rule_id)
    
    for rule_id in args.enable:
        linter.enable_rule(rule_id)
    
    # Filter by severity level
    min_level = LintLevel.ERROR if args.quiet else LintLevel.HINT if args.verbose else LintLevel.INFO
    level_priority = {
        LintLevel.ERROR: 0,
        LintLevel.WARNING: 1,
        LintLevel.INFO: 2,
        LintLevel.HINT: 3
    }
    
    # Process files
    all_issues = []
    json_results = []
    has_errors = False
    
    if args.stdin:
        # Read from stdin
        source = sys.stdin.read()
        issues = linter.lint(source)
        filtered_issues = [i for i in issues if level_priority[i.level] <= level_priority[min_level]]
        
        if args.format == 'json':
            json_results.append(format_issues_json(filtered_issues, '<stdin>'))
        else:
            for issue in filtered_issues:
                print(format_issue_text(issue, '<stdin>'))
        
        if any(i.level == LintLevel.ERROR for i in issues):
            has_errors = True
    else:
        # Require files if not reading from stdin
        if not args.files:
            parser.error('No files specified')
        
        # Process each file
        for filename in args.files:
            path = Path(filename)
            
            if not path.exists():
                print(f"Error: File not found: {filename}", file=sys.stderr)
                has_errors = True
                continue
            
            if not path.is_file():
                print(f"Error: Not a file: {filename}", file=sys.stderr)
                has_errors = True
                continue
            
            try:
                issues = lint_file(str(path))
                filtered_issues = [i for i in issues if level_priority[i.level] <= level_priority[min_level]]
                
                if args.format == 'json':
                    json_results.append(format_issues_json(filtered_issues, filename))
                else:
                    for issue in filtered_issues:
                        print(format_issue_text(issue, filename))
                
                if any(i.level == LintLevel.ERROR for i in issues):
                    has_errors = True
                    
            except Exception as e:
                print(f"Error linting {filename}: {e}", file=sys.stderr)
                has_errors = True
    
    # Output JSON results if requested
    if args.format == 'json':
        print(json.dumps(json_results, indent=2))
    
    return 1 if has_errors else 0


if __name__ == '__main__':
    sys.exit(main())